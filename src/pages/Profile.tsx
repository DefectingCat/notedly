import React, { useEffect } from 'react';
import Header from '../components/common/Header';
import { useQuery, gql } from '@apollo/client';
import useStore from '../store';
import InfiniteScroll from 'react-infinite-scroll-component';
import LoadError from '../components/common/LoadError';
import LoadingCard from '../components/common/LoadingCard';
import style from '../pages/home.module.scss';
import MemoPosts from '../components/common/Postlist';

// Generated by https://quicktype.io

export interface MyNotes {
  myNotes: MyNotesClass;
}

export interface MyNotesClass {
  notes: Notes[];
  cursor: string;
  hasNextPage: boolean;
}

export interface Notes {
  id: string;
  content: string;
  author: Author;
  createdAt: string;
  favoriteCount: number;
  favoritedBy: {
    id: string;
    username: string;
  }[];
}

export interface Author {
  id: string;
  username: string;
  email: string;
  avatar: string;
}

interface CursorVars {
  myNotesCursor: string;
}

const MY_NOTES = gql`
  query MY_NOTES($myNotesCursor: String) {
    myNotes(cursor: $myNotesCursor) {
      notes {
        id
        content
        author {
          id
          username
          email
          avatar
        }
        createdAt
        favoriteCount
        favoritedBy {
          id
          username
        }
      }
      cursor
      hasNextPage
    }
  }
`;

const MyNote = (): JSX.Element => {
  const { state } = useStore();

  const { data, loading, error, fetchMore } = useQuery<MyNotes, CursorVars>(
    MY_NOTES
  );

  /**
   * fetchMoreData
   * 该函数用于滚动到底部加载新的数据
   * 用 cache.ts 判断并合并新的数据
   */
  const fetchMoreData = async () => {
    await fetchMore?.({
      variables: {
        myNotesCursor: data?.myNotes.cursor,
      },
    });
  };

  /**
   * 每次进入首页时
   * 恢复到上次浏览的位置
   * 防止过度滚动，只监听 state.scrolledTop
   */
  useEffect(() => {
    window.scrollTo(0, state.scrolledTop);
  }, [state.scrolledTop]);

  return (
    <>
      <main className={`${style['main']}`}>
        <Header title='我的动态' />
        {error ? (
          <LoadError />
        ) : loading ? (
          <LoadingCard loading />
        ) : data ? (
          <InfiniteScroll
            dataLength={data.myNotes.notes.length}
            next={fetchMoreData}
            hasMore={data.myNotes.hasNextPage}
            loader={<LoadingCard loading />}
          >
            <MemoPosts data={data} />
          </InfiniteScroll>
        ) : (
          <LoadError />
        )}
      </main>
    </>
  );
};

export default MyNote;
