import React, { useEffect } from 'react';
import Header from '../components/common/Header';
import { useQuery, gql } from '@apollo/client';
import useStore from '../store';
import InfiniteScroll from 'react-infinite-scroll-component';
import LoadError from '../components/common/LoadError';
import LoadingCard from '../components/common/LoadingCard';
import style from '../pages/home.module.scss';
import MemoPosts from '../components/common/Postlist';

// Generated by https://quicktype.io

export interface Me {
  me: MeClass;
}

export interface MeClass {
  id: string;
  username: string;
  notes: Notes[];
}

export interface Notes {
  id: string;
  content: string;
  createdAt: string;
  favoriteCount: number;
  author: {
    username: string;
    id: string;
    avatar: string;
    email: string;
  };
  favoritedBy: FavoritedBy[];
}

export interface FavoritedBy {
  id: string;
  username: string;
}

const GET_NOTES = gql`
  query Me {
    me {
      id
      username
      notes {
        id
        content
        createdAt
        favoriteCount
        author {
          username
          id
          avatar
          email
        }
        favoritedBy {
          id
          username
        }
      }
    }
  }
`;

const MyNote = (): JSX.Element => {
  // fetchMore
  const { data, loading, error } = useQuery<Me>(GET_NOTES);

  const { state } = useStore();

  /**
   * @TODO 我的动态分页！
   */
  // const fetchMoreData = async () => {
  //   await fetchMore({
  //     variables: { noteFeedCursor: data?.me.cursor },
  //   });
  // };

  /**
   * 每次进入首页时
   * 恢复到上次浏览的位置
   * 防止过度滚动，只监听 state.scrolledTop
   */
  useEffect(() => {
    window.scrollTo(0, state.scrolledTop);
  }, [state.scrolledTop]);

  return (
    <>
      <main className={`${style['main']}`}>
        <Header title='我的动态' />
        {error ? (
          <LoadError />
        ) : loading ? (
          <LoadingCard loading />
        ) : data ? (
          <InfiniteScroll
            dataLength={data.me.notes.length}
            /**
             * @TODO 分页！
             */
            next={() => undefined}
            hasMore={false}
            loader={<LoadingCard loading />}
          >
            {/* {data.noteFeed.notes.map((item) => {
            return <Post key={item.id} {...item} />;
          })} */}
            <MemoPosts data={data} />
          </InfiniteScroll>
        ) : (
          <LoadError />
        )}
      </main>
    </>
  );
};

export default MyNote;
